start: item_block

item_block: item* | comment*

comment: "//" /[^\n]+/

ident: /[A-Za-z_][A-Za-z_0-9]*/


item: visibility? (module | use_decl | function | struct | enum | constant | impl)


impl: "impl" ident generics? "{" function* "}"

enum: "enum" ident generics? "{" ( enum_field ("," enum_field)* ","?)? "}"
enum_field: ident ("=" SIGNED_INT)?


struct: "struct" ident generics? "{" ( struct_field ("," struct_field)* ","? )? "}" // TODO: struct with unnamed fields, ...
struct_field: visibility? ident ":" type


constant: "const" ident (":" type)? "=" expression ";"


module: "mod" ident ";"
| "mod" ident "{" item_block "}"

use_decl: "use" use_tree ";"
use_tree: (simple_path? "::")? "*" 
| (simple_path? "::")? "{" (use_tree ("," use_tree)* ","? )? "}"
| simple_path ("as" (ident | "_"))?

function: "fn" ident generics? "(" fn_args ")" ( "->" ident ) ? (block_expr | ";")

generics: "<" (ident (":" type ("+" type)*)? ","?)* ">"
fn_args: ( ident ":" type ","? )* // maybe "self" param


type: ident
| "(" ((type ",")* type? )? ")" -> tupple
| type_path

type_path: "::"? type_path_segment ("::" type_path_segment)*
type_path_segment: simple_path_segment "::"? generics? //todo: fn type


simple_path: "::"? simple_path_segment ("::" simple_path_segment)*
simple_path_segment: ident | "super" | "self"


block_expr: "{" (stmt | (expression ";"))* expression? "}"

stmt: for_stmt | while_stmt

for_stmt: "for" "(" (ident "in" expression)? ")" block_expr
while_stmt: "while" "(" expression? ")" block_expr

expression: ident
    | SIGNED_INT
    | expression op expression


op: "+" | "-" | "*" | "/"


visibility: "pub"
    | "pub" "(" "self" ")"
    | "pub" "(" "super" ")" // todo: expand that



// https://doc.rust-lang.org/stable/reference/items.html


%import common.WORD
%import common.WS
%import common.SIGNED_INT
%ignore WS