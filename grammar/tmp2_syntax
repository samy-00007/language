start: item_block

item_block: item*

ident: /[A-Za-z_][A-Za-z_0-9]*/


item: (function | struct | constant)


struct: "struct" ident "{" ( struct_field ("," struct_field)* ","? )? "}" // TODO: struct with unnamed fields, ...
struct_field: ident ":" type


constant: "const" ident (":" type)? "=" expression ";"


function: "fn" ident "(" fn_args ")" ( "->" ident ) ? (block_expr | ";")

fn_args: ( ident ":" type ","? )* // maybe "self" param

type: ident
| "(" ((type ",")* type? )? ")" -> tupple
| type_path

type_path: "::"? type_path_segment ("::" type_path_segment)*
type_path_segment: simple_path_segment "::"? //todo: fn type


simple_path: "::"? simple_path_segment ("::" simple_path_segment)*
simple_path_segment: ident | "super" | "self"


block_expr: "{" (stmt | (expression ";"))* expression? "}"

stmt: for_stmt | while_stmt

for_stmt: "for" "(" (ident "in" expression)? ")" block_expr
while_stmt: "while" "(" expression? ")" block_expr

expression: ident
    | SIGNED_INT
    | expression op expression


op: "+" | "-" | "*" | "/"




// https://doc.rust-lang.org/stable/reference/items.html


%import common.WORD
%import common.WS
%import common.SIGNED_INT
%ignore WS